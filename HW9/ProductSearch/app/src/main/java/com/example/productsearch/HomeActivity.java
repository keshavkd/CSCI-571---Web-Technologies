package com.example.productsearch;import android.app.ProgressDialog;import android.content.Intent;import android.os.Build;import android.support.annotation.RequiresApi;import android.support.design.widget.TabLayout;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v4.widget.NestedScrollView;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.CheckBox;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import org.w3c.dom.Text;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.android.volley.AuthFailureError;import com.android.volley.Request;import com.android.volley.Request.Method;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import org.json.JSONArray;import org.json.JSONObject;public class HomeActivity extends AppCompatActivity {    /**     * The {@link android.support.v4.view.PagerAdapter} that will provide     * fragments for each of the sections. We use a     * {@link FragmentPagerAdapter} derivative, which will keep every     * loaded fragment in memory. If this becomes too memory intensive, it     * may be best to switch to a     * {@link android.support.v4.app.FragmentStatePagerAdapter}.     */    private SectionsPagerAdapter mSectionsPagerAdapter;    /**     * The {@link ViewPager} that will host the section contents.     */    private ViewPager mViewPager;    private static final String TAG = "HomeActivity";    EditText key, dist;    RadioGroup grp;    RadioButton btn, btx;    AutoCompleteTextView atx;    LinearLayout ensx;    CheckBox n, u, x, f, l, ensb;    Spinner spx;    TextView tx1, tx2;    ProgressDialog progress;    String filename = "file10.txt";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        // Create the adapter that will return a fragment for each of the two        // primary sections of the activity.        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());        // Set up the ViewPager with the sections adapter.        mViewPager = (ViewPager) findViewById(R.id.container);        mViewPager.setAdapter(mSectionsPagerAdapter);        TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);        mViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));        tabLayout.addOnTabSelectedListener(new TabLayout.ViewPagerOnTabSelectedListener(mViewPager));//        File yourFile = new File("temp.txt");//        try {//            yourFile.createNewFile(); // if file already exists will do nothing//            FileOutputStream oFile = new FileOutputStream(yourFile, false);//        } catch (FileNotFoundException e) {//            e.printStackTrace();//        }  catch (IOException e) {//            e.printStackTrace();//        }    }    public void ensClick(View v) {        ensx = findViewById(R.id.ens_enable_layout);        if (ensx.getVisibility() == LinearLayout.GONE){//            ensx.animate().alpha(1.0f);//            ensx.clearAnimation();            ensx.setVisibility(LinearLayout.VISIBLE);        } else {//            ensx.animate().alpha(0.0f);            ensx.setVisibility(LinearLayout.GONE);        }    }    public void curClick(View v) {        grp = findViewById(R.id.radioGroup);        grp.clearCheck();        btx = findViewById(R.id.cur_loc);        btx.setChecked(true);        btn = findViewById(R.id.cus_loc);        btn.setChecked(false);        atx = findViewById(R.id.zipcode);        atx.setEnabled(false);        TextView tx1 = findViewById(R.id.error2);        tx1.setVisibility(v.GONE);    }    public void cusClick(View v) {        grp = findViewById(R.id.radioGroup);        grp.clearCheck();        btx = findViewById(R.id.cus_loc);        btx.setChecked(true);        btn = findViewById(R.id.cur_loc);        btn.setChecked(false);        atx = findViewById(R.id.zipcode);        atx.setEnabled(true);    }    public void clearBtn(View v) {        key = findViewById(R.id.keyword);        dist = findViewById(R.id.distance);        atx = findViewById(R.id.zipcode);        spx = findViewById(R.id.category);        n = findViewById(R.id.newc);        u = findViewById(R.id.used);        x = findViewById(R.id.uspec);        f = findViewById(R.id.free);        l = findViewById(R.id.loc);        ensb = findViewById(R.id.ens);        key.setText("");        dist.setText("");        atx.setText("");        spx.setSelection(0);        n.setChecked(false);        u.setChecked(false);        x.setChecked(false);        f.setChecked(false);        l.setChecked(false);        curClick(v);        if (ensb.isChecked()) {            ensb.setChecked(false);            ensClick(v);        }        tx1 = findViewById(R.id.error1);        tx1.setVisibility(v.GONE);    }    @RequiresApi(api = Build.VERSION_CODES.O)    public void searchBtn(View v) {        key = findViewById(R.id.keyword);        ensb = findViewById(R.id.ens);        atx = findViewById(R.id.zipcode);        btx = findViewById(R.id.cus_loc);        String ackey = key.getText().toString().trim();        String aczip = atx.getText().toString().trim();        tx1 = findViewById(R.id.error1);        tx2 = findViewById(R.id.error2);        boolean f1, f2;        if (ackey.isEmpty()) {            f1 = false;            tx1.setVisibility(v.VISIBLE);        } else {            f1 = true;            tx1.setVisibility(v.GONE);        }        if (ensb.isChecked()) {            if (btx.isChecked()) {                if (aczip.isEmpty() || aczip.length() != 5) {                    tx2.setVisibility(v.VISIBLE);                    f2 = false;                } else {                    tx2.setVisibility(v.GONE);                    f2 = true;                }            } else {                f2 = true;            }        } else {            f2 = true;        }        if (!(f1 && f2))            Toast.makeText(this, "Please fix all fields with errors", Toast.LENGTH_SHORT).show();        else {            Log.d(TAG, "FIELDS HAVE NO PROBLEMS");            key = findViewById(R.id.keyword);            dist = findViewById(R.id.distance);            atx = findViewById(R.id.zipcode);            spx = findViewById(R.id.category);            n = findViewById(R.id.newc);            u = findViewById(R.id.used);            x = findViewById(R.id.uspec);            f = findViewById(R.id.free);            l = findViewById(R.id.loc);            ensb = findViewById(R.id.ens);            btx = findViewById(R.id.cur_loc);            btn = findViewById(R.id.cus_loc);            atx = findViewById(R.id.zipcode);            Log.d(TAG, "FIELDS HAVE BEEN SET");            Intent intx = new Intent(HomeActivity.this, ProductPage.class);            Log.d(TAG, "INTENT INITIALIZED");            intx.putExtra("KEY", key.getText().toString().trim());            intx.putExtra("CAT", spx.getSelectedItemPosition());            intx.putExtra("NEW", n.isChecked());            intx.putExtra("USED", u.isChecked());            intx.putExtra("UNS", x.isChecked());            intx.putExtra("FREE", f.isChecked());            intx.putExtra("LOC", l.isChecked());            intx.putExtra("ENS", ensb.isChecked());            intx.putExtra("CUR", btx.isChecked());            intx.putExtra("DIST", dist.getText().toString());            intx.putExtra("CUS", btn.isChecked());            intx.putExtra("ZIP", atx.getText().toString());            Log.d(TAG, "PRODUCT INTENT");            startActivity(intx);        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.//        getMenuInflater().inflate(R.menu.menu_home, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    /**     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to     * one of the sections/tabs/pages.     */    public class SectionsPagerAdapter extends FragmentPagerAdapter {        public SectionsPagerAdapter(FragmentManager fm) {            super(fm);        }        @Override        public Fragment getItem(int position) {            Fragment f = null;            switch(position) {                case 0:                    f = new SearchFragment();                    break;                case 1:                    f = new WishFragment();                    break;            }            return f;        }        @Override        public int getCount() {            // Show 3 total pages.            return 2;        }    }    @Override    protected void onResume() {        super.onResume();//        try {//            List<Entry> ogJS = new ArrayList<>();//            FileInputStream fs = new FileInputStream(new File(getApplicationContext().getFilesDir(), filename));//            ObjectInputStream os = new ObjectInputStream(fs);//            Log.d("WISHSET", "FILESTREAM");//            Log.d("WISHSET", ogJS.toString());//            WishAdapter adap = new WishAdapter(getApplicationContext(), ogJS, this);//            RecyclerView wrc = findViewById(R.id.wishRec);//            wrc.setLayoutManager(new GridLayoutManager(getApplicationContext(), 2));//            wrc.setAdapter(adap);//            adap.notifyDataSetChanged();//        } catch (Exception e) {////        }    }}